{"version":2,"kind":"Notebook","sha256":"6da6272a15221d28c0090e32e68e9f81e32e22042bb9a1e775e08a1eb3b70140","slug":"validation.constituencies","location":"/validation/constituencies.ipynb","dependencies":[],"frontmatter":{"title":"Constituency dataset validation","content_includes_title":true,"kernelspec":{"name":"python3","display_name":".venv","language":"python"},"authors":[{"nameParsed":{"given":"PolicyEngine","family":"Team","literal":"PolicyEngine Team"},"name":"PolicyEngine Team","id":"contributors-myst-generated-uid-0"}],"github":"https://github.com/policyengine/policyengine-uk-data","copyright":"2024","numbering":{"title":{"offset":1}},"source_url":"https://github.com/policyengine/policyengine-uk-data/blob/main/docs/validation/constituencies.ipynb","edit_url":"https://github.com/policyengine/policyengine-uk-data/edit/main/docs/validation/constituencies.ipynb","exports":[{"format":"ipynb","filename":"constituencies.ipynb","url":"/policyengine-uk-data/build/constituencies-4483c4c8a3cec5b30928792fbab5d394.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Constituency dataset validation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ag2I6txLAz"}],"identifier":"constituency-dataset-validation","label":"Constituency dataset validation","html_id":"constituency-dataset-validation","implicit":true,"key":"agW8sx3Ioj"}],"key":"Eac6IUR9qG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from policyengine_uk import Microsimulation\nimport pandas as pd\nimport h5py\nfrom itables import init_notebook_mode\nimport itables.options as opt\nfrom pathlib import Path\nfrom policyengine_uk_data.storage import STORAGE_FOLDER\n\nopt.maxBytes = \"1MB\"\ninit_notebook_mode(all_interactive=True)\n\nREPO = Path(\".\").resolve().parent\n\nweights_file_path = STORAGE_FOLDER / \"parliamentary_constituency_weights.h5\"\nwith h5py.File(weights_file_path, \"r\") as f:\n        weights = f[str(2025)][...]\n\nconstituencies = pd.read_csv(STORAGE_FOLDER / \"constituencies_2024.csv\")\n\nbaseline = Microsimulation()\nhousehold_weights = baseline.calculate(\"household_weight\", 2025).values\n\nfrom policyengine_uk_data.datasets.frs.local_areas.constituencies.loss import create_constituency_target_matrix, create_national_target_matrix\nfrom policyengine_uk_data.datasets import EnhancedFRS_2022_23\nconstituency_target_matrix, constituency_actuals, _ = create_constituency_target_matrix(EnhancedFRS_2022_23, 2025, None)\nnational_target_matrix, national_actuals = create_national_target_matrix(EnhancedFRS_2022_23, 2025, None)\n\nconstituency_wide = weights @ constituency_target_matrix\nconstituency_wide.index = constituencies.code.values\nconstituency_wide[\"name\"] = constituencies.name.values\n\nconstituency_results = pd.melt(constituency_wide.reset_index(), id_vars=[\"index\", \"name\"], var_name=\"variable\", value_name=\"value\")\n\nconstituency_actuals.index = constituencies.code.values\nconstituency_actuals[\"name\"] = constituencies.name.values\nconstituency_actuals_long = pd.melt(constituency_actuals.reset_index(), id_vars=[\"index\", \"name\"], var_name=\"variable\", value_name=\"value\")\n\nconstituency_target_validation = pd.merge(constituency_results, constituency_actuals_long, on=[\"index\", \"variable\"], suffixes=(\"_target\", \"_actual\"))\nconstituency_target_validation.drop(\"name_actual\", axis=1, inplace=True)\nconstituency_target_validation.columns = [\"index\", \"name\", \"metric\", \"estimate\", \"target\"]\n\nconstituency_target_validation[\"error\"] = constituency_target_validation[\"estimate\"] - constituency_target_validation[\"target\"]\nconstituency_target_validation[\"abs_error\"] = constituency_target_validation[\"error\"].abs()\nconstituency_target_validation[\"rel_abs_error\"] = constituency_target_validation[\"abs_error\"] / constituency_target_validation[\"target\"]","key":"tMjg1OsbZg"},{"type":"output","id":"0dl_6Ig5cGMFFGe2VdLL2","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"<script>\n    let is_dark_theme = function () {\n        // Jupyter Lab\n        if ('jpThemeLight' in document.body.dataset)\n            return (document.body.dataset.jpThemeLight === \"false\");\n\n        // VS Code\n        if ('vscodeThemeKind' in document.body.dataset)\n            return document.body.dataset.vscodeThemeKind.includes('dark');\n\n        // Jupyter Book\n        if ('theme' in document.documentElement.dataset)\n            return document.documentElement.dataset.theme.includes('dark');\n\n        // Default\n        return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n\n    if (is_dark_theme()) {\n        document.documentElement.classList.add('dark');\n    }\n    else {\n        document.documentElement.classList.remove('dark');\n    }\n</script>\n","content_type":"text/html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"656768fe56290332acafcbd80eaa99cc","path":"/policyengine-uk-data/build/656768fe56290332acafcbd80eaa99cc.html"},"text/plain":{"content":"<IPython.core.display.HTML object>","content_type":"text/plain"}}}],"key":"HPFZHSvRWa"}],"key":"iPIgWgGN49"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calibration check","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wtyLgXNv3U"}],"identifier":"calibration-check","label":"Calibration check","html_id":"calibration-check","implicit":true,"key":"ajslEkNE5g"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Looking at the sorted validation results by relative absolute error shows how well our calibrated weights perform against the actual target statistics across UK parliamentary constituencies under the new 2024 boundaries. The table reveals the accuracy of our estimates, from the closest matches to the largest discrepancies, where a lower relative error indicates better calibration performance.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"SmaPL6QEVP"}],"key":"kB7VJMsgGI"}],"key":"A9zbAnCp4u"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"constituency_target_validation.sort_values(\"rel_abs_error\", ascending=False)","key":"VbcgWcptWT"},{"type":"output","id":"BrPN7eFAsMHTovxGOX4rW","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"dd2429c570d1e1117ebb85820748afc4","path":"/policyengine-uk-data/build/dd2429c570d1e1117ebb85820748afc4.html"},"text/plain":{"content":"          index                              name                    metric  \\\n247   E14001310          Kensington and Bayswater  hmrc/total_income/amount   \n97    E14001160                Chelsea and Fulham  hmrc/total_income/amount   \n109   E14001172  Cities of London and Westminster  hmrc/total_income/amount   \n202   E14001265            Hampstead and Highgate  hmrc/total_income/amount   \n382   E14001445                     Richmond Park  hmrc/total_income/amount   \n...         ...                               ...                       ...   \n1066  E14001479         Solihull West and Shirley   hmrc/total_income/count   \n1442  E14001205          Dulwich and West Norwood                  age/0_10   \n1026  E14001439    Reading West and Mid Berkshire   hmrc/total_income/count   \n366   E14001429                             Poole  hmrc/total_income/amount   \n758   E14001171                      Christchurch   hmrc/total_income/count   \n\n          estimate        target         error     abs_error  rel_abs_error  \n247   4.096908e+09  1.576401e+10 -1.166711e+10  1.166711e+10       0.740110  \n97    3.928113e+09  1.218443e+10 -8.256316e+09  8.256316e+09       0.677612  \n109   4.725083e+09  1.402316e+10 -9.298082e+09  9.298082e+09       0.663052  \n202   4.186280e+09  1.019354e+10 -6.007261e+09  6.007261e+09       0.589320  \n382   3.928054e+09  8.311778e+09 -4.383724e+09  4.383724e+09       0.527411  \n...            ...           ...           ...           ...            ...  \n1066  5.848713e+04  5.850595e+04 -1.882521e+01  1.882521e+01       0.000322  \n1442  1.561473e+04  1.561229e+04  2.434325e+00  2.434325e+00       0.000156  \n1026  5.633829e+04  5.633011e+04  8.179993e+00  8.179993e+00       0.000145  \n366   2.759484e+09  2.759392e+09  9.241626e+04  9.241626e+04       0.000033  \n758   5.075770e+04  5.075811e+04 -4.120690e-01  4.120690e-01       0.000008  \n\n[6500 rows x 8 columns]","content_type":"text/plain"}}}],"key":"f33HBn5k9p"}],"key":"cGlTF0PdR7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"national_performance = household_weights @ national_target_matrix\nnational_target_validation = pd.DataFrame({\"metric\": national_performance.index, \"estimate\": national_performance.values})\nnational_target_validation[\"target\"] = national_actuals.values\n\nnational_target_validation[\"error\"] = national_target_validation[\"estimate\"] - national_target_validation[\"target\"]\nnational_target_validation[\"abs_error\"] = national_target_validation[\"error\"].abs()\nnational_target_validation[\"rel_abs_error\"] = national_target_validation[\"abs_error\"] / national_target_validation[\"target\"]","key":"uBaSv7oGFN"},{"type":"output","id":"Xi3wIuoreGL9ApnqhSZ9S","data":[],"key":"hZo94cWSlt"}],"key":"RvIFHHTjjP"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The table below shows the relative absolute error for each calibration target at the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xnovMm4G2c"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"national level","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Tzpju9KJXt"}],"key":"nxFUFHZrIj"},{"type":"text","value":", sorted from the closest matches to the largest discrepancies.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"i2OmvjO1tT"}],"key":"UDyLKnh4cM"}],"key":"MDwYzIku0a"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"national_target_validation.sort_values(\"rel_abs_error\")","key":"Umu9oKGT3Y"},{"type":"output","id":"UkLbZu8cOoE95fv1M4Y3L","data":[{"output_type":"execute_result","execution_count":4,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"b61198cd950293d98d184f4cd9ef430a","path":"/policyengine-uk-data/build/b61198cd950293d98d184f4cd9ef430a.html"},"text/plain":{"content":"                                                metric      estimate  \\\n32                                     obr/tax_credits  5.616313e+09   \n229  hmrc/private_pension_income_income_band_48_70_...  1.237713e+10   \n97                                ons/london_age_30_39  1.583098e+06   \n215  hmrc/private_pension_income_income_band_47_50_...  2.193850e+10   \n122                             ons/scotland_age_10_19  5.999660e+05   \n..                                                 ...           ...   \n146  hmrc/private_pension_income_count_income_band_...  9.710027e+05   \n152  hmrc/dividend_income_count_income_band_42_12_5...  1.196584e+05   \n143  hmrc/state_pension_income_band_42_12_570.0_to_...  1.236036e+10   \n144  hmrc/state_pension_count_income_band_42_12_570...  1.116327e+06   \n149  hmrc/savings_interest_income_income_band_42_12...  1.592776e+08   \n\n           target         error     abs_error  rel_abs_error  \n32  -1.000000e+08  5.716313e+09  5.716313e+09     -57.163133  \n229  1.236528e+10  1.184927e+07  1.184927e+07       0.000958  \n97   1.585000e+06 -1.902044e+03  1.902044e+03       0.001200  \n215  2.183503e+10  1.034687e+08  1.034687e+08       0.004739  \n122  5.970000e+05  2.965971e+03  2.965971e+03       0.004968  \n..            ...           ...           ...            ...  \n146  1.738270e+05  7.971757e+05  7.971757e+05       4.586029  \n152  2.021400e+04  9.944436e+04  9.944436e+04       4.919579  \n143  1.819054e+09  1.054130e+10  1.054130e+10       5.794935  \n144  1.492520e+05  9.670751e+05  9.670751e+05       6.479478  \n149  1.901933e+07  1.402583e+08  1.402583e+08       7.374513  \n\n[335 rows x 6 columns]","content_type":"text/plain"}}}],"key":"olFmbftBOi"}],"key":"hoemVYFhf8"}],"key":"rFGxNdqO15"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"National dataset validation","url":"/validation/national","group":"PolicyEngine UK data"},"next":{"title":"Local authority dataset validation","url":"/validation/local-authorities","group":"PolicyEngine UK data"}}},"domain":"http://localhost:3000"}